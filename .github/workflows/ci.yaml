name: CI+CD
on:
  push:
    branches: ["dev"]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.21

      - name: Validate Go code formatting
        run: gofmt -e main.go

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.21

      - name: Initialize Go module
        run: go mod init github.com/popilmv/app1-go

      - name: Install dependencies
        run: go get github.com/gorilla/mux

      - name: Build Go project
        run: go build
        
  slack:
    name: Slack notification
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Slack notification	
        uses: 8398a7/action-slack@v3
        with:
         status: custom
         fields: workflow,job,commit,repo
         custom_payload: |
          {
            attachments: [{
              color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
              text: `${process.env.AS_WORKFLOW}\n${process.env.AS_JOB} (${process.env.AS_COMMIT}) of ${process.env.AS_REPO}@${process.env.AS_REF} by ${process.env.AS_AUTHOR} ${{ job.status }} in ${process.env.AS_TOOK}`,
            }]
          }
        env:
         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always() 

  docker:
    name: Docker Image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Check Docker Hub for the latest image
        id: check_image
        run: |
          TAG=$(curl -s https://registry.hub.docker.com/v2/repositories/marina1327/app1-go/tags/ | jq -r '.results | sort_by(.last_pushed) | .[0].name')
          echo "Latest Docker image tag: $TAG"
          echo "::set-output name=tag::$TAG"
        shell: bash

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get the current date and time
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d-%H-%M-%S')"

      - name: Get the branch name
        id: branch
        run: echo "::set-output name=branch::$(echo $GITHUB_REF | sed 's/refs\/heads\///')"

      - name: Set TAG environment variable
        run: echo "TAG=${{ steps.date.outputs.date }}" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/app1-go:${{ steps.branch.outputs.branch }}-${{ steps.date.outputs.date}}
  CD:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Check for changes in Docker Hub image
        id: check_changes
        run: |
          TAG=$(curl -s https://registry.hub.docker.com/v2/repositories/marina1327/app1-go/tags/ | jq -r '.results | sort_by(.last_pushed) | .[0].name')
          echo "Latest Docker image tag: $TAG"
          if [[ "$TAG" != "${{ needs.ci.outputs.tag }}" ]]; then
            echo "New Docker image available. Triggering CD."
            echo "::set-output name=tag::$TAG"
            echo "TAG=$TAG" >> .env
          else
            echo "No new Docker image available. CD not required."
            exit 1
          fi
        shell: bash

      - name: Set up Docker Compose - Do CD
        run: docker-compose -f docker-compose.yaml up -d
